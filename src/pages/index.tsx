import Head from "next/head";
import { Box, Button, Grid, useDisclosure } from "@chakra-ui/react";
import Navbar from "@components/Navbar";
import FilterSection from "@components/FilterSection";
import ListApartment from "@components/ListApartment";
import BookApartment from "@components/BookApartment";
import { gql } from "@apollo/client";
import client from "@lib/apolloClient";
import { $FIXME } from "@utils/constant";
import { NextPage } from "next";
import { useState } from "react";
import Cookies from "cookies";
import { IncomingMessage, ServerResponse } from "http";

interface HomeProps {
  apartments: $FIXME;
}

const Home: NextPage<HomeProps> = (props) => {
  const {apartments} = props;
  const [queryApartments, setQueryApartments] = useState(apartments || []);
  const [modal, setModal] = useState(false);
  const [selectedApartment, setSelectedApartment] = useState({});

  const handleModal = () => setModal(!modal);

  const handleBookButtonClick = (item: $FIXME) => {
    setModal(true);
    setSelectedApartment(item);
  };

  console.log({setQueryApartments})
  return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app"/>
          <link rel="icon" href="/favicon.ico"/>
        </Head>

        <Navbar/>
        <Box position="relative" px="10rem" zIndex={1} marginTop={20}>
          <Grid marginTop={7} width="100%" templateColumns="200px 1fr" gap={5}>
            <FilterSection setQueryApartments={setQueryApartments}/>
            <ListApartment
                apartments={queryApartments}
                isSeller={false}
                bookButtonClick={handleBookButtonClick}
            />
          </Grid>
        </Box>
        <BookApartment
            modal={modal}
            closeModal={handleModal}
            apartment={selectedApartment}
        />
      </>
  );
};

export default Home;

export async function getServerSideProps(context: { req: IncomingMessage; res: ServerResponse; }) {
  const secure: boolean = process.env.NODE_ENV === 'production';
  const myCookies = new Cookies(context.req, context.res, { secure });
  const accessToken = myCookies.get('BarryTestAccessToken');
  if (accessToken) {
    return {
      redirect: {
        destination: '/seller',
        permanent: false,
      },
    };
  }
  const fetchApartment = gql`
    {
      getApartments {
        name
        id
        description
        type
        price
        number_room
        slots {
          id
          date
          booked
        }
      }
    }
  `;
  const {
    data: { getApartments },
  } = await client("").query({
    query: fetchApartment,
  });

  return {
    props: {
      apartments: getApartments,
    },
  };
}
